@using AdventureLog.Data

@inject Repository repository

<EditForm Model=quest>
    <RazorGenericComponents.Cards.CollapsableCard>
        <CardHeader>
            <h3>@quest.Name <b>(@completedQuestTasks / @questTasks.Count)</b> </h3>
        </CardHeader>
        <CardBody>
            <ul class="list-group list-group-flush">
                @foreach (var questTask in questTasks)
                {
                    <RazorGenericComponents.ListItemWithCheckBox IsCheckValue="questTask.IsCompleted"
                                      IsCheckValueChanged=@((x) => CheckValueInQuestTaskChange(questTask, x))
                                      IsCheckValueExpression=@(() => questTask.IsCompleted)
                                      LabelText="@($"{questTask.Name} ({questTask.PointsReward})")" />
                }
            </ul>
        </CardBody>
        <CardFooter>
            <RazorGenericComponents.Buttons.DisabableButton Classes="btn btn-success" Text="@($"Complete ({quest.CompletePoints})")" Disabled=@(completedQuestTasks == questTasks.Count) OnClick=CompleteQuestTask />
            <RazorGenericComponents.Buttons.DisabableButton Classes="btn btn-success" Text="Complete And Restart" Disabled=@(completedQuestTasks == questTasks.Count) OnClick=CompleteAndRestartTask />
            <button type="button" class="btn btn-danger" @onclick="CancelQuestTask">Cancel</button>
            <button type="button" class="btn btn-warning" @onclick="RestartQuestTasks">Restart</button>
        </CardFooter>
    </RazorGenericComponents.Cards.CollapsableCard>
</EditForm>

@code {
    [Parameter] public Quest quest { get; set; }
    [Parameter] public ICollection<QuestTask> questTasks { get; set; }
    [Parameter] public EventCallback<int> GainPointsCallback { get; set; }
    [Parameter] public EventCallback OnComplete { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private int completedQuestTasks = 0;

    protected override void OnInitialized()
    {
        completedQuestTasks = questTasks.Count(x => x.IsCompleted);
    }

    void CheckValueInQuestTaskChange(QuestTask questTask, bool IsComplete)
    {
        questTask.IsCompleted = IsComplete;
        completedQuestTasks = questTasks.Count(x => x.IsCompleted);
        repository.Update(questTask);
        int gainPoints = IsComplete ? questTask.PointsReward : questTask.PointsReward * -1; 
        GainPointsCallback.InvokeAsync(gainPoints);
    }

    void CompleteQuestTask()
    {
        RestartQuestTasks();
        quest.IsActive = false;
        repository.Update(quest);
        GainPointsCallback.InvokeAsync(quest.CompletePoints);
        OnComplete.InvokeAsync();
    }

    void CompleteAndRestartTask()
    {
        RestartQuestTasks();
        GainPointsCallback.InvokeAsync(quest.CompletePoints);
    }

    void CancelQuestTask()
    {
        RestartQuestTasks();
        quest.IsActive = false;
        repository.Update(quest);
        OnCancel.InvokeAsync();
    }

    void RestartQuestTasks()
    {
        foreach (QuestTask questTask in questTasks)
        {
            if (!questTask.IsCompleted) continue;
            questTask.IsCompleted = false;
            repository.Update(questTask);
        }
        completedQuestTasks = 0;
    }
}
