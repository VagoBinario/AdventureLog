@using Data

@typeparam TItem where TItem : DbObject, new()
@inject Repository repository

<EditForm Model=@Model class="col-md-4" OnSubmit=FormSubmitted>
    <div class="form">
        <div class="row">
            @FormInputData
        </div>
        @if(OnFormSubmited.HasDelegate)
        {
            <input type="submit" value="@submitButtonName" class="btn btn-primary" />
        }
        @if (Model.Id != 0 && OnModelDelete.HasDelegate)
        {
            <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
        }
        @if(OnModelCancel.HasDelegate)
        {
            <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
        }
    </div>
</EditForm>

@code {
    [Parameter] public TItem Model { get; set; }
    [Parameter] public EventCallback<TItem> OnFormSubmited { get; set; }
    [Parameter] public EventCallback<TItem> OnModelDelete { get; set; }
    [Parameter] public EventCallback<TItem> OnModelCancel { get; set; }
    [Parameter] public RenderFragment FormInputData { get; set; }

    bool isNew { get; set; }
    
    string submitButtonName => isNew ? "Create" : "Update";

    protected override void OnParametersSet()
    {
        isNew = Model.Id == 0;
    }

    void FormSubmitted()
    {
        if (isNew)
        {
            repository.Create(Model);
            isNew = false;
        }
        else
        {
            repository.Update(Model);
        }
        OnFormSubmited.InvokeAsync();
    }

    async void Delete()
    {
        repository.Delete(Model);
        await OnModelDelete.InvokeAsync(Model);
    }

    void Cancel()
    {
        OnModelCancel.InvokeAsync(Model);
    }
}

