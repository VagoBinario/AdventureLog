@using AdventureLog.Data
@using AdventureLog.Data.Factories
@typeparam TItem where TItem : DbObject, new()

@inject Repository repository
@if (showTable)
{
    <button type="button" class="btn btn-primary" onclick="@(() => NewItem())">New</button>
    <RazorGenericComponents.TableBase TItem=TItem Items=rows>
        <TableHeader>
            @foreach (string header in headers)
            {
                <th scope="col">@header</th>
            }
            <th scope="col">Actions</th>
        </TableHeader>
        <RowTemplate>
            @foreach (string propertyName in headers)
            {
                <td>@context.GetPropertyValue(propertyName)</td>
            }
            <td>
                <button type="button" class="btn btn-warning" onclick="@(() => EditItem(context))">Edit</button>
                <button type="button" class="btn btn-danger" onclick="@(() => DeleteItem(context))">Delete</button>
                @if (ExtraItemActions != null)
                {
                    @ExtraItemActions(context)    
                }
            </td>
        </RowTemplate>
    </RazorGenericComponents.TableBase>
}
else
{
    <DBFormBase TItem=TItem Model="selectedItem" OnFormSubmited=@((x) => OnSubmit(x)) OnModelCancel=@((x) => OnCancel(x))>
        <FormInputData>
            @if(FormInputData != null){
                @FormInputData(selectedItem)
            }
        </FormInputData>
    </DBFormBase>
}

@code {

    [Parameter] public RenderFragment<TItem> FormInputData { get; set; }
    [Parameter] public RenderFragment<TItem> ExtraItemActions { get; set; }
    [Parameter] public Func<TItem, bool> Filter { get; set; }
    IEnumerable<string> headers;
    List<TItem> rows;
    public TItem selectedItem { get; set; }
    bool showTable = true;

    protected override void OnInitialized()
    {
        headers = repository.GetTableHeaders<TItem>();
        rows = ((Filter is null) ? repository.GetAll<TItem>() : repository.GetAll<TItem>(Filter)).ToList();
        selectedItem = DBObjectFactory<TItem>.Instance();
    }

    void OnSubmit(TItem item)
    {
        if (!rows.Contains(item)) rows.Add(item);
        selectedItem = null;
        showTable = true;
        StateHasChanged();
    }

    void OnCancel(TItem item)
    {
        if(item.Id != 0)
        {
            var newItem = repository.Get<TItem>(item.Id);
            var index = rows.IndexOf(item);
            rows[index] = newItem;    
        }
        selectedItem = null;
        showTable = true;
        StateHasChanged();
    }

    void NewItem()
    {
        selectedItem = DBObjectFactory<TItem>.Instance();
        showTable = false;
        StateHasChanged();
    }

    void EditItem(TItem entity)
    {
        selectedItem = entity;
        showTable = false;
        StateHasChanged();
    }

    void DeleteItem(TItem item)
    {
        //TODO Check for confirm
        rows.Remove(item);
        repository.Delete(item);
        StateHasChanged();
    }
}